import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useUserStore } from "~/stores/useLocalUser";
// import Link from "next/link";
// import { useUserStore } from "~/stores/useLocalUser";

import { api } from "~/utils/api";

export default function Home() {
  const user = useUser();
  const router = useRouter();

  const createError = api.user.create.useMutation().isError;
  const createNewUser = api.user.create.useMutation();
  const searchUser = api.user.userCheck.useQuery({
    userId: user.user?.id ?? "",
  });
  const userStatusUpdate = api.user.statusUpdate.useMutation();

  const [curStat, setCurStat] = useState(() => {
    return searchUser.data?.status;
  });

  const firstName = useUserStore().firstName;
  const setFirstName = useUserStore().actions.setFirstName;
  const setUserId = useUserStore().actions.setUserId;

  console.log("searchLocalUser.", searchUser.data);

  useEffect(() => {
    if (!searchUser.data) return;
    if (curStat !== "waiting") {
      userStatusUpdate.mutate({
        userId: searchUser.data.userId,
        status: "waiting",
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [searchUser.data, curStat]);

  useEffect(() => {
    if (user.isSignedIn) {
      if (searchUser.data && firstName !== searchUser.data.name) {
        setFirstName(searchUser.data.name);
        setUserId(user.user.id);
      }
      if (user.user.firstName && user.user.firstName !== firstName) {
        console.log("HELLO FROM ABOUT TO CREATE AN USER ACCOUNT");
        setFirstName(user.user.firstName);
        setUserId(user.user.id);
        if (!createError) {
          createNewUser.mutate({
            name: user.user.firstName,
            userId: user.user.id,
          });
        }
      }
    }
  }, [
    createNewUser,
    firstName,
    searchUser.data,
    setFirstName,
    setUserId,
    user.isSignedIn,
    user.user?.firstName,
    user.user?.id,
    userStatusUpdate,
    createError,
  ]);

  const onBtnClick = async () => {
    if (user.user?.id) {
      userStatusUpdate.mutate({
        userId: user.user.id,
        status: "looking",
      });
    }
    await router.push("/waiting");
  };
  const appID = process.env.AGORA_APP_ID;
  console.log("appID : ", appID);

  return (
    <>
      <Head>
        <title>Pixelmate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="text-white">
          <h1>Hello Welcome</h1>
          {!user.isSignedIn && <SignInButton />}
          {!!user.isSignedIn && <SignOutButton />}
        </div>
        {user.isSignedIn && (
          <button
            onClick={onBtnClick}
            className="mt-10 rounded-sm bg-sky-400 px-3 py-2"
          >
            Ready
          </button>
        )}
      </main>
    </>
  );
}
