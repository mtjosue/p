import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Modal from "~/components/modal";
import {
  useFirstLoad,
  useSetFirstLoad,
  useSetTermsAgreed,
  useSetUserId,
  useTermsAgreed,
  useUserId,
} from "~/stores/useLocalUser";
import { api } from "~/utils/api";

export default function Home() {
  const firstLoad = useFirstLoad();
  console.log("firstLoad", firstLoad);
  const setFirstLoad = useSetFirstLoad();
  const user = useUser();
  const userId = useUser().user?.id;
  const zusUserId = useUserId();
  const setZusUserId = useSetUserId();
  const router = useRouter();
  // const firstName = useUserStore().firstName;
  // const setFirstName = useUserStore().actions.setFirstName;
  const termsAgreed = useTermsAgreed();
  const setTermsAgreed = useSetTermsAgreed();
  const [noSkips, setNoSkips] = useState(false);
  const [openModal, setOpenModal] = useState(false);

  //
  const userStatusUpdate = api.user.statusUpdate.useMutation();

  //
  const searchUser = api.user.userCheck.useQuery(
    {
      userId: userId ?? "",
      firstLoad: firstLoad,
    },
    {
      refetchOnWindowFocus: false,
      refetchOnReconnect: false,
      refetchOnMount: false,
      retryOnMount: false,
      refetchInterval: 0,
      cacheTime: 0,
      staleTime: 0,
    },
  );

  console.log("zusUserId", zusUserId);

  useEffect(() => {
    if (!searchUser.data) return;

    if (searchUser.isSuccess) {
      setZusUserId(searchUser.data.userId);
      setFirstLoad(false);
      if (searchUser.data.termsAgreed) {
        setTermsAgreed(false);
      }
      if (!searchUser.data.termsAgreed) {
        setTermsAgreed(true);
      }
    }

    // if (searchUser.isSuccess && !searchUser.data.termsAgreed) {
    //   setTermsAgreed(true);
    // }
  }, [
    searchUser.data,
    searchUser.isSuccess,
    setFirstLoad,
    setTermsAgreed,
    setZusUserId,
    zusUserId,
  ]);
  0;
  // console.log("SEARCHUSER :", searchUser.data);

  useEffect(() => {
    console.log("user.isSignedIn", user.isSignedIn);
    console.log("termsAgreed---------", termsAgreed);

    if (!user.isSignedIn) return;

    if (
      !searchUser.isFetching &&
      !searchUser.isLoading &&
      !searchUser.error &&
      !searchUser.isRefetching &&
      !searchUser.data
    ) {
      // if (!termsAgreed) {
      // }
      if (termsAgreed !== null) {
        if (termsAgreed) {
          console.log("FIRING OVERHERE");
        } else {
          // setTermsAgreed(true);
          // console.log("ELSEEEEEE FIRING OVERHERE");
        }
      } else {
        setTermsAgreed(true);
      }
    }
  }, [
    searchUser.data,
    searchUser.error,
    searchUser.isFetching,
    searchUser.isLoading,
    searchUser.isRefetching,
    setTermsAgreed,
    termsAgreed,
    user.isSignedIn,
  ]);

  // useEffect(() => {
  //   if (searchUser.data) {
  //     if (searchUser.data.skips < 1) {
  //       setNoSkips(true);
  //     }
  //   }
  // }, [router, searchUser.data]);

  const onBtnClick = async () => {
    if (userId) {
      userStatusUpdate.mutate({
        userId: userId,
        status: "looking",
      });
    }
    await router.push("/waiting");
  };

  console.log("termsAgreed ::::::", termsAgreed);

  return (
    <>
      <Head>
        <title>Pixelmate</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="text-white">
          <h1>Hello Welcome</h1>
          {!user.isSignedIn && <SignInButton />}
          {!!user.isSignedIn && <SignOutButton />}
        </div>

        {/* {!termsAgreed && !searchUser.isFetching && !searchUser.isRefetching && (
          <Modal />
        )} */}
        {termsAgreed ? <Modal /> : ""}
        {user.isSignedIn && (
          <button
            disabled={noSkips}
            onClick={onBtnClick}
            className={`mt-10 rounded-sm ${
              noSkips ? "bg-slate-500" : "bg-sky-500"
            } px-3 py-2`}
          >
            {noSkips
              ? "You've exhausted your daily allowance, come back tomorrow!"
              : "Ready"}
          </button>
        )}
      </main>
    </>
  );
}
